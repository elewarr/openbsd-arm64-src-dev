Index: sys/dev/fdt/sxisid.c
===================================================================
RCS file: sys/dev/fdt/sxisid.c
diff -N sys/dev/fdt/sxisid.c
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ sys/dev/fdt/sxisid.c	29 Sep 2019 19:07:12 -0000
@@ -0,0 +1,144 @@
+/*	$OpenBSD$	*/
+/*
+ * Copyright (c) 2019 Krystian Lewandowski
+ *
+ * Permission to use, copy, modify, and distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#include <sys/param.h>
+#include <sys/systm.h>
+#include <sys/device.h>
+#include <sys/malloc.h>
+#include <sys/mutex.h>
+
+#include <machine/fdt.h>
+#include <machine/bus.h>
+
+#include <dev/ofw/openfirm.h>
+#include <dev/ofw/fdt.h>
+
+#define EFUSE_OFFSET	0x200
+#define SID_PRCTL_OFFSET(n)	(((n) & 0xff) << 16)
+#define SID_PRCTL_OP_LOCK	(0xac << 8)
+#define SID_PRCTL_READ	(0x01 << 1)
+#define SID_PRCTL	0x40
+#define SID_RDKEY	0x60
+#define SID_LEN	0x10
+
+#define HREAD4(sc, reg)					\
+		(bus_space_read_4((sc)->sc_iot, (sc)->sc_ioh,(reg)))
+
+#define HWRITE4(sc, reg, val)					\
+		(bus_space_write_4((sc)->sc_iot, (sc)->sc_ioh, (reg), (val)))
+
+struct sxisid_softc {
+	struct device sc_dev;
+	bus_space_tag_t sc_iot;
+	bus_space_handle_t sc_ioh;
+	struct mutex sc_mtx;
+};
+
+int sxisid_match(struct device *, void *, void *);
+void sxisid_attach(struct device *, struct device *, void *);
+uint32_t sxisid_read(bus_size_t, uint32_t, uint8_t *);
+
+struct cfattach sxisid_ca = {
+	sizeof(struct sxisid_softc), sxisid_match, sxisid_attach
+};
+
+struct cfdriver sxisid_cd = {
+	NULL, "sxisid", DV_DULL
+};
+
+static struct sxisid_softc *sxisid_sc;
+
+extern char *hw_uuid;
+
+int
+sxisid_match(struct device *parent, void *match, void *aux)
+{
+	struct fdt_attach_args *faa = aux;
+	return OF_is_compatible(faa->fa_node, "allwinner,sun50i-a64-sid");
+}
+
+void
+sxisid_attach(struct device *parent, struct device *self, void *aux)
+{
+	struct sxisid_softc *sc = (struct sxisid_softc *) self;
+	struct fdt_attach_args *faa = aux;
+	uint8_t *sid, hw_uuid_len;
+	uint32_t i;
+
+	if (faa->fa_nreg < 1) {
+		printf(": no registers\n");
+		return;
+	}
+	sc->sc_iot = faa->fa_iot;
+	if (bus_space_map(sc->sc_iot, faa->fa_reg[0].addr,
+	    faa->fa_reg[0].size, 0, &sc->sc_ioh)) {
+		printf(": can't map registers\n");
+		return;
+	}
+	printf("\n");
+
+	mtx_init(&sc->sc_mtx, IPL_NONE);
+	sxisid_sc = sc;
+
+	hw_uuid_len = SID_LEN * 2 + 1;
+	hw_uuid = malloc(hw_uuid_len, M_DEVBUF, M_NOWAIT);
+	sid = malloc(SID_LEN, M_TEMP, M_NOWAIT);
+	if (hw_uuid != NULL && sid != NULL &&
+	    sxisid_read(EFUSE_OFFSET, SID_LEN, sid) == SID_LEN) {
+		for (i = 0; i < SID_LEN; i++) {
+			snprintf(hw_uuid + (i * 2),
+			    hw_uuid_len - (i * 2),
+			    "%.2x", sid[i]);
+		}
+	}
+	free(sid, M_TEMP, SID_LEN);
+}
+
+uint32_t
+sxisid_read(bus_size_t offset, uint32_t size, uint8_t *out)
+{
+	struct sxisid_softc *sc = sxisid_sc;
+	uint32_t i, j, val;
+
+	if (sc == NULL) {
+		return 0;
+	}
+
+	mtx_enter(&sc->sc_mtx);
+	for (i = 0; i < size; i += 4) {
+
+		val = SID_PRCTL_OFFSET(offset - EFUSE_OFFSET + i) |
+		    SID_PRCTL_OP_LOCK | SID_PRCTL_READ;
+		HWRITE4(sc, SID_PRCTL, val);
+
+		while (HREAD4(sc, SID_PRCTL) & SID_PRCTL_READ) {
+			continue;
+		}
+
+		val = HREAD4(sc, SID_RDKEY);
+		for (j = i; j < size; j++) {
+			if (j - i == sizeof(val)) {
+				break;
+			}
+			out[j] = val & 0xFF;
+			val = val >> 8;
+		}
+	}
+	mtx_leave(&sc->sc_mtx);
+
+	return size;
+}
