Index: sys/arch/arm/arm/cpufunc.c
===================================================================
RCS file: /cvs/src/sys/arch/arm/arm/cpufunc.c,v
retrieving revision 1.57
diff -u -p -r1.57 cpufunc.c
--- sys/arch/arm/arm/cpufunc.c	16 May 2021 03:39:27 -0000	1.57
+++ sys/arch/arm/arm/cpufunc.c	2 Feb 2024 22:34:04 -0000
@@ -76,6 +76,8 @@ int	arm_dcache_align_mask;
 /* 1 == use cpu_sleep(), 0 == don't */
 int cpu_do_powersave;
 
+#if defined(CPU_ARMv7)
+
 struct cpu_functions armv7_cpufuncs = {
 	/* CPU functions */
 
@@ -133,6 +135,67 @@ struct cpu_functions armv7_cpufuncs = {
 	armv7_setup			/* cpu setup		*/
 };
 
+#elif defined(CPU_ARMv6)
+
+struct cpu_functions armv6_cpufuncs = {
+	/* CPU functions */
+
+	cpufunc_id,			/* id			*/
+	cpufunc_nullop,			/* cpwait		*/
+
+	/* MMU functions */
+
+	cpufunc_control,		/* control		*/
+	cpufunc_auxcontrol,		/* aux control		*/
+	cpufunc_domains,		/* Domain		*/
+	armv6_setttb,			/* Setttb		*/
+	cpufunc_dfsr,			/* dfsr			*/
+	cpufunc_dfar,			/* dfar			*/
+	cpufunc_ifsr,			/* ifsr			*/
+	cpufunc_ifar,			/* ifar			*/
+
+	/* TLB functions */
+
+	armv6_tlb_flush,		/* tlb_flushID		*/
+	armv6_tlb_purge_SE,		/* tlb_flushID_SE	*/
+	armv6_tlb_flush,		/* tlb_flushI		*/
+	armv6_tlb_purge_SE,		/* tlb_flushI_SE	*/
+	armv6_tlb_flush,		/* tlb_flushD		*/
+	armv6_tlb_purge_SE,		/* tlb_flushD_SE	*/
+
+	/* Cache operations */
+
+	cpufunc_nullop, 		/* icache_sync_all	*/
+	(void *)cpufunc_nullop, 	/* icache_sync_range	*/
+
+	armv6_cache_flush,		/* dcache_wbinv_all	*/
+	(void *)armv6_cache_flush,	/* dcache_wbinv_range	*/
+	(void *)armv6_cache_flush,	/* dcache_inv_range	*/
+	(void *)cpufunc_nullop, 	/* dcache_wb_range	*/
+
+	armv6_cache_flush,              /* idcache_wbinv_all	*/
+	(void *)armv6_cache_flush,	/* idcache_wbinv_range	*/
+
+	cpufunc_nullop,			/* sdcache_wbinv_all	*/
+	(void *)cpufunc_nullop,		/* sdcache_wbinv_range	*/
+	(void *)cpufunc_nullop,		/* sdcache_inv_range	*/
+	(void *)cpufunc_nullop,		/* sdcache_wb_range	*/
+	(void *)cpufunc_nullop,		/* sdcache_drain_writebuf */
+
+	/* Other functions */
+
+	cpufunc_nullop,			/* flush_prefetchbuf	*/
+	cpufunc_nullop, 		/* drain_writebuf	*/
+
+	(void *)cpufunc_nullop,		/* sleep (wait for interrupt) */
+
+	/* Soft functions */
+	armv6_context_switch,		/* context_switch	*/
+	armv6_setup			/* cpu setup		*/
+};
+
+#endif /* CPU_ARMv6 */
+
 /*
  * Global constants also used by locore.s
  */
@@ -249,6 +312,8 @@ arm_get_cachetype_cp15v7(void)
 	arm_dcache_l2_linesize = log2(arm_pdcache_line_size);
 }
 
+#if defined(CPU_ARMv7)
+
 /* 
  */
 void
@@ -301,6 +366,7 @@ armv7_dcache_wbinv_all(void)
 	/* L2 cache flushing removed. Our current L2 caches are separate. */
 }
 
+#endif /* CPU_ARMv7 */
 
 /*
  * Cannot panic here as we may not have a console yet ...
@@ -317,6 +383,16 @@ set_cpufuncs(void)
 	 * CPU type where we want to use it by default, then we set it.
 	 */
 
+	if ((cputype & CPU_ID_IMPLEMENTOR_MASK) == CPU_ID_ARM_LTD &&
+	    (cputype & 0x00000f00) == 0x00000600) {
+		cpufuncs = armv6_cpufuncs;
+		//	        get_cachetype_table();
+		//	        pmap_pte_init_generic();
+		return 0;
+	}
+
+#if defined(CPU_ARMv7)
+
 	if ((cputype & CPU_ID_ARCH_MASK) == CPU_ID_ARCH_CPUID) {
 		uint32_t mmfr0;
 
@@ -343,6 +419,9 @@ set_cpufuncs(void)
 			return 0;
 		}
 	}
+
+#endif /* CPU_ARMv7 */
+
 	/*
 	 * Bzzzz. And the answer was ...
 	 */
@@ -426,4 +505,20 @@ armv7_setup(void)
 
 	/* And again. */
 	cpu_idcache_wbinv_all();
+}
+
+void
+armv6_setup(void)
+{
+
+	/* Set up default control registers bits */
+	int cpuctrl = CPU_CONTROL_MMU_ENABLE | CPU_CONTROL_32BP_ENABLE
+		 | CPU_CONTROL_32BD_ENABLE | CPU_CONTROL_SYST_ENABLE
+	         | CPU_CONTROL_IDC_ENABLE | CPU_CONTROL_WBUF_ENABLE;
+
+	/* Clear out the cache */
+	cpu_idcache_wbinv_all();
+
+	/* Set the control register */
+        cpu_control(0xffffffff, cpuctrl);
 }
