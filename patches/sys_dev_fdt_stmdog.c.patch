Index: sys/dev/fdt/stmdog.c
===================================================================
RCS file: sys/dev/fdt/stmdog.c
diff -N sys/dev/fdt/stmdog.c
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ sys/dev/fdt/stmdog.c	14 Feb 2024 11:30:10 -0000
@@ -0,0 +1,94 @@
+/* $OpenBSD$ */
+/*
+ * Copyright (c) 2024 Krystian Lewandowski <k.lewandowski@icloud.com>
+ *
+ * Permission to use, copy, modify, and distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#include <sys/param.h>
+#include <sys/systm.h>
+#include <sys/device.h>
+
+#include <machine/bus.h>
+#include <machine/fdt.h>
+
+#include <dev/ofw/openfirm.h>
+#include <dev/ofw/fdt.h>
+
+#include <dev/fdt/stm32mp1.h>
+
+#define IWDG_KR  		0x00
+
+#define KR_ENABLE		0xCCCC
+#define KR_RELOAD               0xAAAA
+#define KR_EWA                  0x5555
+
+struct stmdog_softc {
+	struct device		sc_dev;
+	bus_space_tag_t		sc_iot;
+	bus_space_handle_t	sc_ioh;
+};
+
+int stmdog_match(struct device *, void *, void *);
+void stmdog_attach(struct device *, struct device *, void *);
+int stmdog_activate(struct device *, int);
+int stmdog_callback(void *, int);
+void stmdog_reset(void);
+
+struct cfdriver stmdog_cd = {
+	NULL, "stmdog", DV_DULL
+};
+
+const struct cfattach stmdog_ca = {
+	sizeof (struct stmdog_softc), stmdog_match, stmdog_attach,
+	NULL, stmdog_activate
+};
+
+int
+stmdog_match(struct device *parent, void *match, void *aux)
+{
+	struct fdt_attach_args *faa = aux;
+	return (OF_is_compatible(faa->fa_node, "st,stm32mp1-iwdg") ||
+	    OF_is_compatible(faa->fa_node, "st,stm32-iwdg"));
+}
+
+void
+stmdog_attach(struct device *parent, struct device *self, void *aux)
+{
+	struct stmdog_softc *sc = (struct stmdog_softc *)self;
+	struct fdt_attach_args *faa = aux;
+
+	if (faa->fa_nreg < 1)
+		return;
+
+	sc->sc_iot = faa->fa_iot;
+	if (bus_space_map(sc->sc_iot, faa->fa_reg[0].addr,
+	    faa->fa_reg[0].size, 0, &sc->sc_ioh)) {
+		printf(": can't map registers\n");
+		return;
+	}
+
+	// assume watchdog is enabled, reset just in case
+	STMWRITE4(sc, IWDG_KR, KR_EWA);
+	STMWRITE4(sc, IWDG_KR, KR_ENABLE);
+	STMWRITE4(sc, IWDG_KR, KR_RELOAD);
+
+	printf("\n");
+}
+
+int
+stmdog_activate(struct device *self, int act)
+{
+  printf("::: stmdog_activate: %d\n", act);
+	return ENODEV;
+}
